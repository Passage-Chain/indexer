import { Registry, isTsProtoGeneratedType, GeneratedType } from "@cosmjs/proto-signing";
import { defaultRegistryTypes } from "@cosmjs/stargate";
import { MsgUnjail } from "cosmjs-types/cosmos/slashing/v1beta1/tx";
import { MsgInstantiateContract, MsgInstantiateContract2, MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";

const missingTypes: ReadonlyArray<[string, GeneratedType]> = [
  ["/cosmos.slashing.v1beta1.MsgUnjail", MsgUnjail],
  ["/cosmwasm.wasm.v1.MsgInstantiateContract", MsgInstantiateContract],
  // ["/cosmwasm.wasm.v1.MsgInstantiateContract2", MsgInstantiateContract2],
  ["/cosmwasm.wasm.v1.MsgExecuteContract", MsgExecuteContract]
];

export function decodeMsg(type: string, msg: Uint8Array) {
  const myRegistry = new Registry([...defaultRegistryTypes, ...missingTypes]);

  const msgType = myRegistry.lookupType(type);

  if (!msgType) {
    throw new Error("Type not found: " + type);
  }

  if (!isTsProtoGeneratedType(msgType)) {
    throw new Error("Type is not generated by ts-protobuf: " + type);
  }

  return msgType.decode(msg);
}

export function uint8arrayToString(arr: Uint8Array) {
  return new TextDecoder().decode(arr);
}
